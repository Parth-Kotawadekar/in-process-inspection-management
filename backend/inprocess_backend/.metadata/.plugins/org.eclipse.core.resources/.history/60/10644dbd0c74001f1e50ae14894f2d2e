package com.api_lcms.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.api_lcms.dto.UserDTO;
import com.api_lcms.model.Customer;
import com.api_lcms.model.Employee;
import com.api_lcms.model.User;
import com.api_lcms.service.UserService;

import jakarta.servlet.http.HttpSession;

@RestController
@RequestMapping("/api")
@CrossOrigin(origins = "http://localhost:3000")
public class UserController {

	@Autowired
	private UserService userService;
	
	@Autowired
	private Employee employee;
	
	@Autowired
	private Customer customer;

	@GetMapping("/allUsers")
	public List<User> getAllUser() {
		return userService.allUsers();
	}

	@PostMapping("/saveUser")
	public User addUser(@RequestBody UserDTO userdto) {

		if(userdto.getEmp_id() != null) {
			System.out.println("Employee id fetched: " + userdto.getEmp_id());
		}else if(userdto.getCust_id() != null){
			System.out.println("Customer id fetched: " + userdto.getUsername());
		}else {
			System.out.println("Error fetching data");
		}

		return userService.createUser(userdto);
	}

	@PostMapping("/login")
	public ResponseEntity<UserDTO> login(@RequestBody UserDTO userdto, HttpSession session) {
	    try {
	        UserDTO loggedInUser = userService.validateUser(userdto.getUsername(), userdto.getPassword());
	        
	        if (loggedInUser != null) {
	        	
	        	Employee
	        	
	            // Store user ID, employee ID, and customer ID in session
	            session.setAttribute("user_id", loggedInUser.getId());
	            session.setAttribute("emp_id", loggedInUser.getEmp_id());
	            session.setAttribute("cust_id", loggedInUser.getCust_id());

	            // Debugging output
	            System.out.println("\n" + "Login Credentials:" + "\n" +
	                "Username: " + loggedInUser.getUsername() + "\n" + 
	                "Logged In User Id: " + loggedInUser.getId() + "\n" +
	                "Logged In Employee Id: " + loggedInUser.getEmp_id() + "\n" +
	                "Logged In Customer Id: " + loggedInUser.getCust_id() + "\n" +
	                "Logged In Password: " + loggedInUser.getPassword() + "\n" +
	                "Logged In Successfully..."
	            );

	            // Return logged in user details
	            return ResponseEntity.ok(loggedInUser);
	        } else {
	            // Unauthorized if user is not found or credentials are incorrect
	            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
	        }
	    } catch (Exception e) {
	        e.printStackTrace();
	        // Return error response in case of exception
	        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
	    }
	}

	
	@GetMapping("/currentUser/{id}")
	public UserDTO getUserById(@PathVariable Integer id) {
		return userService.getUserById(id);
	}
	

}
